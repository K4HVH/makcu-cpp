name: Auto Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      is_update: ${{ steps.version_check.outputs.is_update }}
      version: ${{ steps.version_check.outputs.version }}
      tag: ${{ steps.version_check.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check version and release status
      id: version_check
      run: |
        # Extract current version from CMakeLists.txt
        CURRENT_VERSION=$(grep -oP 'project\(makcu-cpp VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
        echo "Current version in CMakeLists.txt: $CURRENT_VERSION"
        
        TAG="v$CURRENT_VERSION"
        
        # Check if tag already exists
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists, checking for new commits"
          
          # Get commits since this tag
          NEW_COMMITS=$(git rev-list ${TAG}..HEAD --count)
          echo "Found $NEW_COMMITS new commits since $TAG"
          
          if [ "$NEW_COMMITS" -gt 0 ]; then
            echo "Will update release with new commits"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "is_update=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits since $TAG"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Tag $TAG does not exist, will create new release"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "is_update=false" >> $GITHUB_OUTPUT
        fi
        
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Generate changelog
      if: steps.version_check.outputs.should_release == 'true'
      id: changelog
      run: |
        TAG="${{ steps.version_check.outputs.tag }}"
        IS_UPDATE="${{ steps.version_check.outputs.is_update }}"
        
        echo "Generating changelog for tag: $TAG"
        echo "Is update: $IS_UPDATE"
        
        if [ "$IS_UPDATE" = "true" ]; then
          # Update existing release - get commits since the tag
          echo "Getting commits since existing tag $TAG"
          git log --oneline ${TAG}..HEAD
          git log --pretty=format:"* %s" ${TAG}..HEAD > changes.txt
        else
          # New release - get all commits since previous version tag
          PREVIOUS_TAG=$(git tag -l "v*" | grep -v "^$TAG$" | sort -V | tail -n1)
          echo "Previous tag: $PREVIOUS_TAG"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, this is initial release"
            echo "* Initial release" > changes.txt
          else
            echo "Getting commits from $PREVIOUS_TAG to HEAD"
            git log --oneline ${PREVIOUS_TAG}..HEAD
            git log --pretty=format:"* %s" ${PREVIOUS_TAG}..HEAD > changes.txt
          fi
        fi
        
        echo "Generated changelog:"
        cat changes.txt
        
        # Use GitHub's multiline output format
        {
          echo 'changelog<<CHANGELOG_EOF'
          cat changes.txt
          echo 'CHANGELOG_EOF'
        } >> $GITHUB_OUTPUT

    - name: Create or update git tag
      if: steps.version_check.outputs.should_release == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        TAG="${{ steps.version_check.outputs.tag }}"
        IS_UPDATE="${{ steps.version_check.outputs.is_update }}"
        
        if [ "$IS_UPDATE" = "true" ]; then
          # Delete and recreate tag to point to latest commit
          git tag -d "$TAG" || true
          git push origin ":refs/tags/$TAG" || true
        fi
        
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"

    - name: Delete existing release if updating
      if: steps.version_check.outputs.should_release == 'true' && steps.version_check.outputs.is_update == 'true'
      run: |
        TAG="${{ steps.version_check.outputs.tag }}"
        # Delete existing release
        gh release delete "$TAG" --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      if: steps.version_check.outputs.should_release == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_check.outputs.tag }}
        release_name: MAKCU C++ ${{ steps.version_check.outputs.tag }}
        body: |
          High-performance C++ library for MAKCU mouse controllers.
          
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Downloads
          * Windows: `makcu-cpp-windows.zip`, `makcu-cpp-windows-installer.exe`
          * Linux: `makcu-cpp-linux.tar.gz`, `makcu-cpp-linux.deb`, `makcu-cpp-linux.rpm`
          
          ## Quick Start
          ```cpp
          #include <makcu.h>
          makcu::Device device;
          device.connect();
          device.mouseMove(100, 0);
          ```
        draft: false
        prerelease: false

  build-windows:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --config Release --parallel

    - name: Create packages
      run: |
        cd build
        cpack -G ZIP
        cpack -G NSIS

    - name: Upload Windows ZIP
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check-and-release.outputs.upload_url }}
        asset_path: ./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-win64.zip
        asset_name: makcu-cpp-windows.zip
        asset_content_type: application/zip

    - name: Upload Windows Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check-and-release.outputs.upload_url }}
        asset_path: ./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-win64.exe
        asset_name: makcu-cpp-windows-installer.exe
        asset_content_type: application/octet-stream

  build-linux:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config build-essential

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Create packages
      run: |
        cd build
        cpack -G TGZ
        cpack -G DEB
        cpack -G RPM

    - name: Upload Linux TGZ
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check-and-release.outputs.upload_url }}
        asset_path: ./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.tar.gz
        asset_name: makcu-cpp-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload DEB package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check-and-release.outputs.upload_url }}
        asset_path: ./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.deb
        asset_name: makcu-cpp-linux.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload RPM package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check-and-release.outputs.upload_url }}
        asset_path: ./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.rpm
        asset_name: makcu-cpp-linux.rpm
        asset_content_type: application/x-rpm
