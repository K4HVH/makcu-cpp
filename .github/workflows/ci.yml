name: Auto Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      is_update: ${{ steps.version_check.outputs.is_update }}
      version: ${{ steps.version_check.outputs.version }}
      tag: ${{ steps.version_check.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check version and release status
      id: version_check
      run: |
        # Extract current version from CMakeLists.txt
        CURRENT_VERSION=$(grep -oP 'project\(makcu-cpp VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
        echo "Current version in CMakeLists.txt: $CURRENT_VERSION"
        
        TAG="v$CURRENT_VERSION"
        
        # Check if tag already exists
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists, checking for new commits"
          
          # Get commits since this tag
          NEW_COMMITS=$(git rev-list ${TAG}..HEAD --count)
          if [ "$NEW_COMMITS" -gt 0 ]; then
            echo "Found $NEW_COMMITS new commits since $TAG, will update release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "is_update=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits since $TAG"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Tag $TAG does not exist, will create new release"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "is_update=false" >> $GITHUB_OUTPUT
        fi
        
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Generate changelog
      if: steps.version_check.outputs.should_release == 'true'
      id: changelog
      run: |
        TAG="${{ steps.version_check.outputs.tag }}"
        IS_UPDATE="${{ steps.version_check.outputs.is_update }}"
        
        if [ "$IS_UPDATE" = "true" ]; then
          # Update existing release - get commits since the tag
          echo "## Changes" > CHANGELOG.md
          git log --pretty=format:"* %s" ${TAG}..HEAD >> CHANGELOG.md
        else
          # New release - get all commits since previous version tag
          PREVIOUS_TAG=$(git tag -l "v*" | grep -v "^$TAG$" | sort -V | tail -n1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "## Changes" > CHANGELOG.md
            echo "* Initial release" >> CHANGELOG.md
          else
            echo "## Changes" > CHANGELOG.md
            git log --pretty=format:"* %s" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
          fi
        fi
        
        # Base64 encode to avoid delimiter issues
        CHANGELOG_B64=$(cat CHANGELOG.md | base64 -w 0)
        echo "changelog_b64=$CHANGELOG_B64" >> $GITHUB_OUTPUT

    - name: Create or update git tag
      if: steps.version_check.outputs.should_release == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        TAG="${{ steps.version_check.outputs.tag }}"
        IS_UPDATE="${{ steps.version_check.outputs.is_update }}"
        
        if [ "$IS_UPDATE" = "true" ]; then
          # Delete and recreate tag to point to latest commit
          git tag -d "$TAG" || true
          git push origin ":refs/tags/$TAG" || true
        fi
        
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"

    - name: Delete existing release if updating
      if: steps.version_check.outputs.should_release == 'true' && steps.version_check.outputs.is_update == 'true'
      run: |
        TAG="${{ steps.version_check.outputs.tag }}"
        # Delete existing release if it exists
        gh release delete "$TAG" --yes || echo "Release $TAG did not exist"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      if: steps.version_check.outputs.should_release == 'true'
      id: create_release
      run: |
        # Decode changelog
        echo "${{ steps.changelog.outputs.changelog_b64 }}" | base64 -d > CHANGELOG.md
        
        # Create release body
        cat > RELEASE_BODY.md << 'BODY_EOF'
        High-performance C++ library for MAKCU mouse controllers.

        BODY_EOF
        
        cat CHANGELOG.md >> RELEASE_BODY.md
        
        cat >> RELEASE_BODY.md << 'BODY_EOF'

        **Downloads:**
        * Windows: `makcu-cpp-windows.zip`, `makcu-cpp-windows-installer.exe`
        * Linux: `makcu-cpp-linux.tar.gz`, `makcu-cpp-linux.deb`, `makcu-cpp-linux.rpm`

        **Quick Start:**
        ```cpp
        #include <makcu.h>
        makcu::Device device;
        device.connect();
        device.mouseMove(100, 0);
        ```
        BODY_EOF
        
        # Create the release
        gh release create "${{ steps.version_check.outputs.tag }}" \
          --title "MAKCU C++ ${{ steps.version_check.outputs.tag }}" \
          --notes-file RELEASE_BODY.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --config Release --parallel

    - name: Create packages
      run: |
        cd build
        cpack -G ZIP
        cpack -G NSIS

    - name: Upload Windows ZIP
      run: |
        gh release upload "${{ needs.check-and-release.outputs.tag }}" \
          "./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-win64.zip#makcu-cpp-windows.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows Installer
      run: |
        gh release upload "${{ needs.check-and-release.outputs.tag }}" \
          "./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-win64.exe#makcu-cpp-windows-installer.exe"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config build-essential

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Create packages
      run: |
        cd build
        cpack -G TGZ
        cpack -G DEB
        cpack -G RPM

    - name: Upload Linux TGZ
      run: |
        gh release upload "${{ needs.check-and-release.outputs.tag }}" \
          "./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.tar.gz#makcu-cpp-linux.tar.gz"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload DEB package
      run: |
        gh release upload "${{ needs.check-and-release.outputs.tag }}" \
          "./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.deb#makcu-cpp-linux.deb"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload RPM package
      run: |
        gh release upload "${{ needs.check-and-release.outputs.tag }}" \
          "./build/makcu-cpp-${{ needs.check-and-release.outputs.version }}-Linux.rpm#makcu-cpp-linux.rpm"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
